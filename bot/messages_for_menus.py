from typing import Dict

HELPER = """
<b>/start</b> - <em>–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</em>
<b>/estimate</b> - <em>–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</em>
<b>/help</b> - <em>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/about</b> - <em>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</em>
"""

ABOUT = """
<b>–ë–û–¢ –û–¶–ï–ù–ö–ò</b>
<b>–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω?</b> - <em>–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ü–µ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.</em>
<b>–ö–∞–∫ –æ–Ω —É—Å—Ç—Ä–æ–µ–Ω?</b> - <em>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫; –Ω–∞ –µ–µ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</em>
<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> - <em>–í–≤–µ–¥–∏—Ç–µ /help</em>
"""

START_ESTIMATION = """
–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.\n
–ß–µ–º –±–æ–ª—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–≤–µ–¥–µ–Ω–æ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞.
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–ª–µ–¥—É–µ—Ç –≤–≤–µ—Å—Ç–∏ /restart –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
"""

not_available_now = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

print_command_text = {
    'help': HELPER,
    'about': ABOUT,
}

features_msg_text = {
    'address': '–ê–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã',
    'rooms': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
    'total_area': '–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º2)',
    'stage': '–≠—Ç–∞–∂',
    'elevator': '–ï—Å—Ç—å –ª–∏ –ª–∏—Ñ—Ç?',
    'largage_elevator': '–ï—Å—Ç—å –ª–∏ –≥—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç?',
}


def format_usr_input(data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É."""
    features_repr = 'üè¢ –í–≤–µ–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ:üè¢\n'
    for feature_name, cyr_name in features_msg_text.items():
        value = data[feature_name]
        if feature_name in {'largage_elevator', 'elevator'}:
            value = '–¥–∞' if value else '–Ω–µ—Ç'
        if feature_name == 'rooms':
            value = value if value else '0 (—Å—Ç—É–¥–∏—è)'
        features_repr += f"{cyr_name} -> <b>{str(value).replace('.', ',')}</b>\n"
    return features_repr


def format_response_from_model(model_response: Dict[str, float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ —Å—Ç—Ä–æ–∫—É."""
    m2_price = f"{model_response['m2_price'] / 1_000:.1f}".replace('.', ',')
    total_price = f"{model_response['total_price'] / 1_000_000:.1f}".replace('.', ',')
    return f"""\n‚≠êÔ∏è–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏‚≠êÔ∏è
–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä ‚âà üò±<b>{m2_price} —Ç.—Ä./–º2</b>üò±
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚âà üí≤<b>{total_price} –º–ª–Ω. —Ä—É–±–ª–µ–π</b>üí≤.

üëç–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!üëç
–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? - –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è /estimate)
"""
